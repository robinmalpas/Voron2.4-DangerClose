[mcu eddy]
canbus_uuid: bf74cdf06076

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 100

[probe_eddy_ng btt_eddy]
sensor_type: ldc1612
#i2c_mcu: eddy
#i2c_bus: i2c0f
#samples_per_second: 250 #500
x_offset: -16  #Reppiter's V3 Low mount #-18.0 Vlad's Mount
y_offset: 11.5 #Reppiter's V3 low Mount #6.0 Vlad's Mount 
#tap_start_z: 2.9
tap_target_z: -0.350 #-0.650
#tap_mode: butter
tap_adjust_z: 0.091 #0.09 #positive numbers raise the offset thats set. 0.09 - 0.094 seems to work amazing for PLA.
#tap_threshold: 300 #250 #The threshold at which to detect a tap.
#tap_butter_order: 2
#tap_butter_lowcut: 5
#tap_butter_highcut: 25
#tap_samples: 3
tap_max_samples: 20
tap_samples_stddev: 0.015
tap_speed: 5

[bed_mesh]
horizontal_move_z: 2 # set this to the same value as home_trigger_height (i.e. 2)
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
speed: 300
# mesh min x,y = bed_min_x + max(15, min(x_offs, 0)) , bed_min_y + max(15, min(y_offs, 0))
# mesh max x,y = bed_max_x - max(15, abs(x_offs)) , bed_max_y - max(15, abs(y_offs)) - fudge for scan overshoot
##mesh_min: 15, 15
##mesh_max: 334, 333
mesh_min: 20, 20
mesh_max: 330, 330
# extra x-axis movement to smooth out moves
scan_overshoot: 5
probe_count: 30,30 # too dense a mesh is bad with rapid scan due to noise from the probe. # noise is fixed, I think
algorithm: bicubic
bicubic_tension: 0.5
#   When using the bicubic algorithm the tension parameter above may
#   be applied to change the amount of slope interpolated. Larger
#   numbers will increase the amount of slope, which results in more
#   curvature in the mesh. Default is .2.
split_delta_z: 0.0125
#   The amount of Z difference (in mm) along a move that will trigger
#   a split. Default is .025.
# interpolate 3 points per probed point
mesh_pps: 2,2 # 3,3
#   A comma separated pair of integers X, Y defining the number of
#   points per segment to interpolate in the mesh along each axis. A
#   "segment" can be defined as the space between each probed point.
#   The user may enter a single value which will be applied to both
#   axes. Default is 2, 2.
adaptive_margin: 5
#   An optional margin (in mm) to be added around the bed area used by
#   the defined print objects when generating an adaptive mesh.
# layers to start fading out Z adjustment and to end it, with a target of 0
fade_start: 0.6 #0.6
fade_end: 10
fade_target: 0

# This section is only relevant for Eddy USB. Comment it out for Eddy Coil.
[temperature_sensor btt_eddy] #[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26

[quad_gantry_level]          
gantry_corners:              
	-60,-10
	410,420
points:
	36,10
	36,320
	346,320
	346,10
speed: 400 #200                   
horizontal_move_z: 5 #2 #5       
retry_tolerance: .01 #0.01      
retries: 10                   
max_adjust: 10

[gcode_macro SENSORLESS_HOME_X]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0 #G28.1 X0
    # Move away
    G90
    G1 X340 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}

[gcode_macro SENSORLESS_HOME_Y]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 Y0 #G28.1 Y0
    # Move away
    G90
    G1 Y340 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}

[homing_override]
gcode:
  # Move 5 up, just in case (this is our safety zhop, this needs 'set_position_z: 0' below)
  G91 ; set relative positioning
  G0 Z5 F1000 ; 5 up zhop
  {% if not rawparams or 'Y' in rawparams %}
    {action_respond_info('Homing Y')}
    SENSORLESS_HOME_Y #G28 Y
    G90 ; set absolute positioning
    G0 Y177.5 F6000 ; return to center
    M400 ; Wait for move to finish
  {% endif %}
  {% if not rawparams or 'X' in rawparams %}
    {action_respond_info('Homing X')}
    SENSORLESS_HOME_X #G28 X
    G90 ; set absolute positioning
    G0 X177.5 F6000 ; return to center
    M400 ; Wait for move to finish
  {% endif %}
  {% if not rawparams or 'Z' in rawparams %}
    {action_respond_info('Homing Z')}
    G90 ; set absolute positioning
    G0 X177.5 Y177.5 F6000 ; Move to the center before Z homing
    G28 Z
    G90 ; set relative positioning
    G0 Z2 F1000 ; 10mm zhop before probe
    G4 S1; Chill for a sec
    M400
    PROBE_EDDY_NG_PROBE_STATIC HOME_Z=1
    G0 Z5 F1000
    M400
  {% endif %}
  G90 ; set absolute positioning
axes: xyz
set_position_z: 0 # This forces the z position to be at 0 when we start homing, so we can move the Z up before homing.

# This moves the nozzle above the center right heatbed screw so we have a fixed place for our temperature drift calibration (and I don't have to remember the coordinates)
[gcode_macro PROBE_EDDY_MOVE_TO_SCREW]
gcode:
  BED_MESH_CLEAR
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}
  G90
  G1 X319 Y176 Z5 F6000

[gcode_macro START_PRINT]
description: 
variable_state: 'Prepare'
variable_record_extruder_temp:0
variable_max_record_extruder_temp:0
gcode:
    {% set bedtemp = params.BED_TEMP|default(60)|int %}
    {% set hotendtemp = params.EXTRUDER_TEMP|default(230)|int %}
    {% set mesh_name = "default" %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    
    mainled_on
    
    {% set extruder_target_temp = 140 %}  #was 125 raised for cleaner nozzle? MAX 140 for TAP on CarbonFiber Plate.

    {% set bed_target_temp = bedtemp|int %}

    M400

    CLEAR_PAUSE

    ## Start Print
    _cpufreq_set GOVERNOR=performance

    ##  Uncomment for bed mesh (1 of 2)
    BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

    G90
    {% if state == 'Prepare' %}

        {action_respond_info("Prepare!")}

        {% if printer['filament_switch_sensor filament_sensor'].enable == True and
              printer['filament_switch_sensor filament_sensor'].filament_detected != True
        %}
            M117 No filament!!!
            {action_respond_info("Please Insert filament in Sensor!")}
            CANCEL_PRINT
        {% endif %}

        #{action_respond_info("Check Heating!")}

        {% if printer.heater_bed.temperature < bed_target_temp %}
            SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info
            M117 Bed heating...
            {action_respond_info("Bed heating...")}
            M106 S127 #Fans On full for Circulation and cooling of EDDY Probe
            PRINTBED_AUTO_DELAY BED_TEMP={bed_target_temp}
            M107 #Fans off For faster heating.
        {% endif %}

        M140 S{bed_target_temp}

        {% if printer.extruder.temperature < extruder_target_temp %} # Heats To warm Nozzle. Comment out to remove Nozzle Heating before Printing.
           SET_DISPLAY_TEXT MSG="Warming Nozzle"
           M117 Warming Nozzle...
           {action_respond_info("Warming Nozzle...")}
           M109 S{extruder_target_temp} 
        {% endif %}
        
        {% if printer.toolhead.homed_axes|lower != "xyz" %}
            SET_DISPLAY_TEXT MSG="Homing"
            M117 Homing
            G28
        {% endif %}
        
        {% if printer.quad_gantry_level.applied|lower != 'true' %}
            SET_DISPLAY_TEXT MSG="QGL"      # Displays info
            M117 QGL
            {action_respond_info("Flying around the World QGL...")}
            QUAD_GANTRY_LEVEL
            {action_respond_info("Coming Home...")}
            SET_DISPLAY_TEXT MSG="Homing"
            M117 Homing
            G28 Z # And once again after QGL, important..
        {% endif %}

        #STATUS_CLEANING
        SET_DISPLAY_TEXT MSG="Cleaning Nozzle"
        {action_respond_info("Cleaning Nozzle...")}
        M117 Cleaning Nozzle
        CLEAN_NOZZLE #Leaves Nozzle in Air after Brushing. Does Not move from Cleaning pad.
        SET_DISPLAY_TEXT MSG="Re-Centering"
        M117 Re-Centering
        G28 Z #Moves Nozzle To center
        
        #PROBE_EDDY_MOVE_TO_SCREW #Moves Nozzle To screw location for Solid Tap.
        SET_DISPLAY_TEXT MSG="Tappy tap"
        M117 Tappy Tap

        SoftToe # Lowers Z Current Before and returns after TAP.
        #PROBE_EDDY_NG_TAP #Taps To set Z-Offset
        
        #STATUS_MESHING
        SET_DISPLAY_TEXT MSG="Meshing"
        {action_respond_info("Inspecting Work Site...")}
        M117 Bed Meshing
        BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=RAPID_SCAN

        M400 #Wait For Current Moves to Finish.

        #STATUS_READY
        M117 Smart Parking
        SET_DISPLAY_TEXT MSG="Smart Parking"
        SMART_PARK
        
        # Set final temperatures before printing instead of relying on the OrcaSlicer start gcode..
        M117 Final Heating..
        SET_DISPLAY_TEXT MSG="Final Heating"
        {action_respond_info("Final heating...")}
        #M140 S{bedtemp} ;set bed temp
        #M104 S{hotendtemp} ;set extruder temp
        M190 S{bedtemp} ;wait for bed temp
        M109 S{hotendtemp};wait for extruder temp
        
        M117 Purging Filament
        SET_DISPLAY_TEXT MSG="Purging"
        LINE_PURGE
        
        SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Start"' 
        UPDATE_DELAYED_GCODE ID=_print_start_wait DURATION=0.5

    {% elif state == 'Start' %}
        SET_DISPLAY_TEXT MSG="Printer Go Brrr!!!"
        M117 Printer Go Brrr!!!
        {action_respond_info("Start!")}
    {% endif %}

[gcode_macro END_PRINT]
description: 
variable_state: 'normal'
gcode:
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    M400
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

    M117 Finish Print!!!
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enable == True and
          printer['filament_switch_sensor filament_sensor'].filament_detected == True
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-25 F2700 #Sovol Default
            G1 E-2 Z0.2 F2400 #Sovol Default
        {% endif %}
    {% endif %}

    {% if (printer.gcode_move.position.z + 25) < z_max %}
        G1 Z+25 F3000
    {% else %}
        G1 Z+{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X0 Y360 F9000

    _ALL_FANS_OFF
    TURN_OFF_HEATERS

    M84 X Y Z E  

    M220 S100
    M221 S100
    PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0 #resets OFFset set by TAP for the next print.
    BED_MESH_CLEAR

    CLEAR_PAUSE

    ## End Print Macro / Idle Timeout
    _cpufreq_set GOVERNOR=ondemand

    {action_respond_info("Finish Print!")}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    SAVE_GCODE_STATE NAME=STATE_QGL
    BED_MESH_CLEAR
    {% if not printer.quad_gantry_level.applied %}
    # Note! Replace this 5 with whatever you want the coarse QGL to happen at.
    # BTT Eddy should keep 5, Mellow Fly/Cartographer can use 10
    _QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=1       
    {% endif %}
    _QUAD_GANTRY_LEVEL horizontal_move_z=2 retry_tolerane=0.015
    # G28 Z
    RESTORE_GCODE_STATE NAME=STATE_QGL