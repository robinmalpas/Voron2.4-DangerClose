[gcode_macro _global_var]
variable_pause_park:{'x': 0, 'y': 0, 'z': 10, 'e': 1}
variable_cancel_park:{'x': 0, 'y': 350, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 345
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 60
variable_load_filament_extruder_temp: 230
variable_heat_soak_time: 0 # in minutes
gcode:

[gcode_macro RETRACT_15]
gcode:
 G1 E-15.0 F3600


[gcode_macro QUAD_GANTRY_LEVEL]

rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    STATUS_LEVELING
    # If QGL is not applied, first run a course calibration
    {% if printer.quad_gantry_level.applied == False %}
        _QUAD_GANTRY_LEVEL RETRY_TOLERANCE=1.0
    {% endif %}
    # then perform fine QGL down to desired spec
    # this has to be a separate macro call so the results of the above call will be visible!
    _FINE_QUAD_GANTRY_LEVEL

[gcode_macro _FINE_QUAD_GANTRY_LEVEL]
gcode:
    STATUS_LEVELING
    {% if printer.quad_gantry_level.applied == True %}
        # go for full quality at reduced probing height
        _QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z=2.0  # <- set your preferred probing height here!
        G1 X175 Y175 Z10 F15000
        STATUS_READY
    {% else %}
        # This should never happen, just perform the full calibration using the defaults
        {action_respond_info("Fine QGL called without calling course QGL first!")}
        _QUAD_GANTRY_LEVEL  # default behavior, no speedup
        G1 X175 Y175 Z10 F15000
        STATUS_READY
    {% endif %}

#[gcode_macro BED_MESH_CALIBRATE]

#rename_existing: _BED_MESH_CALIBRATE
#gcode:
#    STATUS_MESHING
#    _BED_MESH_CALIBRATE
#    STATUS_READY


[gcode_macro CENTER]
gcode:
    G0  X175 Y175 F5000

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.TOOL|int %}
  {% set t0_start = params.T0_TEMP %}
  {% set t1_start = params.T1_TEMP %}
  {% set t0_used = params.IST0|upper %}
  {% set t1_used = params.IST1|upper %}
  {% set target_temp = params.TOOL_TEMP %}
  
  {% set target_chamber = params.CHAMBER_TEMP|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  SET_GCODE_OFFSET Z=0                                 # Set offset to 0
  
  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position
  T0   #always start with T0 selected
  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turn on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    #G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  {% if t1_used == "TRUE" %}
    M104 S150 T1
  {% endif %}
  M109 S150                                             # Heat hotend to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  #STATUS_LEVELING                                      # Set LEDs to leveling-mode
  #Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
  #G28 Z                                                # Home Z again after Z_TILT_ADJUST

  ##  Uncomment for V2.4 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  STATUS_LEVELING                                      # Set LEDs to leveling-mode
  QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  G28 Z                                             # Home Z again after QGL

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE ADAPTIVE=1                        # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  #CARTOGRAPHER_TOUCH                                    # Calibrate z offset only with hot nozzle

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  SMART_PARK
  STATUS_HEATING                                        # Set LEDs to heating-mode
  #G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  #M109 S{target_temp}                               # Heat the hotend to set temp
  {% if t1_used == "TRUE" %}
    M104 S{t1_start} T1
    {% if t0_used == "TRUE" %}
      M109 S{t0_start} T0
    {% else %}
      M104 S0 T0
      M109 S{t1_start} T1
    {% endif %}
  {% else %}
    M104 S0 T1
    M109 S{t0_start} T0
  {% endif %}

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING                                       # Set LEDs to printing-mode
  LINE_PURGE                                               # Absolute position


[gcode_macro _WAIT_FOR_TEMP_WITHIN_TOLERANCE]
description: Wait for temp to get within tolerance
gcode:
    {% set tolerance = params.TOLERANCE | float  %}
    {% set actual = printer[params.HEATER].temperature | float %}
    {% set target = printer[params.HEATER].target | float %}
    {% if target != 0 and ((actual < (target - tolerance)) or (actual > (target + tolerance))) %}
        { action_respond_info('Extruder temperature %.1fC is not within %.1fC of %.1fC target; waiting...' % (actual, tolerance, target)) }
        RESPOND TYPE=echo MSG='TEMPERATURE_WAIT SENSOR={params.HEATER} MININUM={target - tolerance} MAXIMUM={target + tolerance}'
        TEMPERATURE_WAIT SENSOR={params.HEATER} MININUM={target - tolerance} MAXIMUM={target + tolerance}
        #RESPOND TYPE=echo MSG='DONE WAITING'
    {% endif %}

[gcode_macro PARK]
gcode:
    G90
    G0 X335 Y335 F9000


[gcode_macro G34]
gcode:
    BED_MESH_CLEAR 
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
      G28
    {% else %}
      G28 Z
    {% endif %}
    QUAD_GANTRY_LEVEL 
    G28 Z 
    G0 X175 Y175 Z30 F3600


  

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
    BED_MESH_PROFILE LOAD=default

[delayed_gcode _print_start_wait]
gcode:
    {% if printer['gcode_macro START_PRINT'].state == 'Heating'%}
        {action_respond_info("Prepare->Heating!")}
    {% elif printer['gcode_macro START_PRINT'].state == 'Start' %}
        {action_respond_info("Heating->Start!")}
    {% endif %}

    {% if printer['gcode_macro START_PRINT'].execute|lower != 'false' %}
        START_PRINT
    {% endif %}


[gcode_macro NUDGE_MOVE_OVER_PROBE]
gcode:
  G0 Z3
  # Put your specific values here!
  # Update them too, after the first run.
  #279.606250,344.081250,1.580000
  G0 X279.606250 F9000
  G0 Y344.081250 F9000

[gcode_macro NUDGE_FIND_TOOL_OFFSET]
gcode:
  NUDGE_MOVE_OVER_PROBE
  TOOL_LOCATE_SENSOR

[gcode_macro NUDGE_FIND_TOOL_OFFSETS]
gcode:
    T0
    M109 T0 S150  # Heat up as much as possible without oozing to account for any thermal deformations
    NUDGE_FIND_TOOL_OFFSET
    M104 T0 S0
    # Match your number of tools:
    #   [1, 2, 3] for a 4-head toolchanger.
    #   [1] for IDEX or Dual Gantry.
    {% for tool in [1] %}
        T{tool}
        M109 T{tool} S150
        NUDGE_MOVE_OVER_PROBE
        TOOL_CALIBRATE_TOOL_OFFSET
        M104 T{tool} S0
    {% endfor %}