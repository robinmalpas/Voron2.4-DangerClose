[gcode_macro _global_var]
variable_pause_park:{'x': 0, 'y': 0, 'z': 10, 'e': 1}
variable_cancel_park:{'x': 0, 'y': 350, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 345
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 60
variable_load_filament_extruder_temp: 230
variable_heat_soak_time: 0 # in minutes
gcode:

[gcode_macro RETRACT_15]
gcode:
 G1 E-15.0 F3600


[gcode_macro QUAD_GANTRY_LEVEL]

rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    STATUS_LEVELING
    # If QGL is not applied, first run a course calibration
    {% if printer.quad_gantry_level.applied == False %}
        _QUAD_GANTRY_LEVEL RETRY_TOLERANCE=1.0
    {% endif %}
    # then perform fine QGL down to desired spec
    # this has to be a separate macro call so the results of the above call will be visible!
    _FINE_QUAD_GANTRY_LEVEL

[gcode_macro _FINE_QUAD_GANTRY_LEVEL]
gcode:
    STATUS_LEVELING
    {% if printer.quad_gantry_level.applied == True %}
        # go for full quality at reduced probing height
        _QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z=2.0  # <- set your preferred probing height here!
        G1 X175 Y175 Z10 F15000
        STATUS_READY
    {% else %}
        # This should never happen, just perform the full calibration using the defaults
        {action_respond_info("Fine QGL called without calling course QGL first!")}
        _QUAD_GANTRY_LEVEL  # default behavior, no speedup
        G1 X175 Y175 Z10 F15000
        STATUS_READY
    {% endif %}

#[gcode_macro BED_MESH_CALIBRATE]

#rename_existing: _BED_MESH_CALIBRATE
#gcode:
#    STATUS_MESHING
#    _BED_MESH_CALIBRATE
#    STATUS_READY


[gcode_macro CENTER]
gcode:
    G0  X175 Y175 F5000

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER_TEMP|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  SET_GCODE_OFFSET Z=0                                 # Set offset to 0

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  #BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    #M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turn on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                             # Heat hotend to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  #STATUS_LEVELING                                      # Set LEDs to leveling-mode
  #Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
  #G28 Z                                                # Home Z again after Z_TILT_ADJUST

  ##  Uncomment for V2.4 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  STATUS_LEVELING                                      # Set LEDs to leveling-mode
  QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  G28 Z                                                # Home Z again after QGL

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  CARTOGRAPHER_TOUCH                                    # Calibrate z offset only with hot nozzle

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING                                       # Set LEDs to printing-mode
  VORON_PURGE                                               # Absolute position


[gcode_macro PRINT_START2]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER_TEMP|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  #SET_GCODE_OFFSET Z=0                                 # Set offset to 0

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  #STATUS_HOMING                                         # Set LEDs to homing-mode
  #G28                                                   # Full home (XYZ)
  #G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  #BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    #M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turn on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  #{% else %}
 #   SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
  #  STATUS_HEATING                                      # Set LEDs to heating-mode
 #   G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
 #   M190 S{target_bed}                                  # Set the target temp for the bed
 #   SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
#    G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
#SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  ##M109 S150                                             # Heat hotend to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  #STATUS_LEVELING                                      # Set LEDs to leveling-mode
  #Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
  #G28 Z                                                # Home Z again after Z_TILT_ADJUST

  ##  Uncomment for V2.4 (Quad gantry level AKA QGL)
  #SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  #STATUS_LEVELING                                      # Set LEDs to leveling-mode
  #QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  #G28 Z                                                # Home Z again after QGL

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  #SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  #STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  #
  #CARTOGRAPHER_TOUCH                                    # Calibrate z offset only with hot nozzle

  # Heat up the hotend up to target via data from slicer
  #SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  #STATUS_HEATING                                        # Set LEDs to heating-mode
  #G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  #M107                                                  # Turn off partcooling fan
#M109# S{target_extruder}                               # Heat the hotend to set temp

  # Get ready to print by doing a primeline and updating the LEDs
  #SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  #STATUS_PRINTING                                       # Set LEDs to printing-mode
  VORON_PURGE         
#[gcode_macro PRINT_START]
#description: 
#variable_state: 'Prepare'
#:0
#:
#    {% set hotendtemp = params.EXTRUDER|default(245)|int %}
#    {% set heatsoak = params.HEATSOAK|default(True)|int %}
#{% set heatsoak_time = printer['gcode_macro _global_var'].heat_soak_time|default(0)|int %} # takes heatsoak time from global variables
#
#    {% set extruder_target_temp = 125 %}
#
#    {% set bed_target_temp = bedtemp|int %}
#    #{action_respond_info(bedtemp)}
    #{action_respond_info(hotendtemp)}

#
 #   CLEAR_PAUSE
    
#    G90
#    {% if state == 'Prepare' %}
#
#        {action_respond_info("Prepare!")}
#
#        {% if printer.extruder.temperature < extruder_target_temp %}
#            STATUS_HEATING
#            M117 Nozzle pre-heating...
#            {action_respond_info("Nozzle pre-heating...")}
##            M109 S{extruder_target_temp} 
 #       {% endif %}
#
 #       {% if printer.toolhead.homed_axes|lower != "xyz" %}
#            G28
#        {% endif %}

        #Start exhaust fan
        #SET_FAN_SPEED FAN=exhaust_fan SPEED=1

 #       {action_respond_info("Check Heating!")}

#        {% if printer.heater_bed.temperature < bed_target_temp %}
 #           M117 Bed heating...
 #           {action_respond_info("Bed heating...")}
  #          M190 S{bed_target_temp}
  #      {% endif %}
  #      STATUS_HEATING
   #     M140 S{bed_target_temp}
   #     M104 S{extruder_target_temp}

        
   #     {% if heatsoak == True %}
   #       M117 Short Heat Soak
   #       G4 P{heatsoak_time * 60000} # pause for x number of minute(s) (see variable_heat_soak_time)
   #     {% endif %}
        
  #      {% if printer.quad_gantry_level.applied|lower != 'true' %}
  #          M117 QGL
            #QUAD_GANTRY_LEVEL_BASE # We use the _BASE variant here as not to remove the stock Sovol override (but we also don't want to use the Sovol override here)
   #         QUAD_GANTRY_LEVEL
   #         M117 Home Z after QGL
   #         G28 Z # And once again after QGL, important..
            # M117 Auto Z Offset
            # Z_OFFSET_CALIBRATION
   #     {% endif %}


        #EDDY-NG Tap Routine
        # First clean at low temp
  #      STATUS_CLEANING
  #      CLEAN_NOZZLE TEMP=150
        # Home Z again after QGL and cleaning
  #      STATUS_HOMING
  #      G28 Z
        #EDDY TAP
        #SET_DISPLAY_TEXT MSG="Tappy tap"
   #     CENTER # this is center of parts during a print
  #      PROBE_EDDY_NG_TAP
        
        # We use the _BASE variant here as not to remove the stock Sovol override (but we also don't want to use the Sovol override here)
        # Remove the comment to add 'METHOD=rapid_scan' when using the Eddy probe
   #     M117 Bed Mesh
   #     BED_MESH_CALIBRATE_BASE ADAPTIVE=1 METHOD=rapid_scan

        # Set final temperatures before printing instead of relying on the OrcaSlicer start gcode..
   #     M117 Final Heating...
  #      STATUS_HEATING
  ##      {action_respond_info("Final heating...")}
  #      M140 S{bedtemp} ;set bed temp
  #      M104 S{hotendtemp} ;set extruder temp
  #      M190 S{bedtemp} ;wait for bed temp
  #      M109 S{hotendtemp};wait for extruder temp
  #      M117 Voron Purge...
  ##      VORON_PURGE
  #      STATUS_PRINTING
       
        #SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Start"' 
        #UPDATE_DELAYED_GCODE ID=_print_start_wait DURATION=0.5

  #  {% elif state == 'Start' %}
  #      M117 Printing
  #      {action_respond_info("Start!")}
  #  {% endif %}

#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BED_MESH_CALIBRATE_BASE
#gcode:
    
#    {% set mesh_name = "default" %}
#    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
#    {% set current_target_temp  = printer.heater_bed.target|int %}
#
#    {action_respond_info("Check Heating!")}
#    {% if printer.heater_bed.temperature != mesh_calibrate_temp %}
#        {action_respond_info("The bed target temperature was not reached!")}
#        {action_respond_info("Bed heating...")}
#        {% if current_target_temp <= mesh_calibrate_temp %}
#          M190 S{mesh_calibrate_temp}
#        {% else %}
#          M190 S{current_target_temp}
#        {% endif %}
#    {% endif %}
#
#    {% if printer.toolhead.homed_axes|lower != "xyz" %}
#        G28
#    {% endif %}
#
#   BED_MESH_CLEAR
 #   
#    BED_MESH_CALIBRATE_BASE ADAPTIVE=1 METHOD=rapid_scan

#    {% if current_target_temp == 0 %}
 #       M140 S0  
#    {% endif %}

[gcode_macro PARK]
gcode:
    G90
    G0 X335 Y335 F9000


[gcode_macro G34]
gcode:
    BED_MESH_CLEAR 
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
      G28
    {% else %}
      G28 Z
    {% endif %}
    QUAD_GANTRY_LEVEL 
    G28 Z 
    G0 X175 Y175 Z30 F3600

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
    BED_MESH_PROFILE LOAD=default

[delayed_gcode _print_start_wait]
gcode:
    {% if printer['gcode_macro START_PRINT'].state == 'Heating'%}
        {action_respond_info("Prepare->Heating!")}
    {% elif printer['gcode_macro START_PRINT'].state == 'Start' %}
        {action_respond_info("Heating->Start!")}
    {% endif %}

    {% if printer['gcode_macro START_PRINT'].execute|lower != 'false' %}
        START_PRINT
    {% endif %}
